{
  parserClass="com.autohotkey.lang.parser.AhkParser"

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix="Ahk"
  psiImplClassSuffix="Impl"
  psiPackage="com.autohotkey.lang.psi"
  psiImplPackage="com.autohotkey.lang.psi.impl"

  elementTypeHolderClass="com.autohotkey.lang.psi.AhkTypes"
  elementTypeClass="com.autohotkey.lang.psi.AhkElementType"
  tokenTypeClass="com.autohotkey.lang.psi.AhkTokenType"

  tokens = [
    //Ahk-specific
    CHAR_SPECIAL="regexp:\p{Punct}"
    COMMA       = ','
    HASH        = '#'
    COLONCOLON  = '::'
    COLON       = ':'
    BACKTICK    = '`'

    //generic
    /*
      Note that since WS_HOZ is marked as "PsiWhiteSpace", the parser ignores it so we do not need to specify
      it within the bnf rules. (We return TokenType.WHITE_SPACE in lexer because GrammarKit will not generate
      the WS_HOZ token class otherwise)
    */
    WS_HOZ="regexp:\p{Blank}+" //Horizontal white space (ie space/tab)
    CRLF="regexp:\v"
    /**
      All line comments after code must be preceded by whitespace, so specifying the regex
      here would not work. (Eg: " hel;lo" and " ;test" would parse as a comment
      even though it is actually a one-word string and whitespace + comment,
      respectively. Instead, the lexer handles this logic.
      See https://www.autohotkey.com/docs/Language.htm#comments
     */
    LINE_COMMENT
    /** Block comment begin/end chars must appear at the beginning of the line */
    BLOCK_COMMENT
    IDENTIFIER = 'regexp:\w+'
  ]
}

/*
  Naming convention:
  - psiElements are camelcase
  - tokens are lowercase: for, if, identifier
  - rules are PascalCase: StructItem, EnumVariant
  - recovery related rules are PascalCase_with_snake_suffix: Item_recover
*/

AhkFile ::= Item*
private Item ::= Line | BLOCK_COMMENT | LINE_COMMENT | CRLF //Note that only CRLF can follow a line comment

/* We check for whitespace before the comment via the lexer.
The parser will ignore all PsiWhitespace elements during ast verification.
(so it's like we're really doing (WS_HOZ LINE_COMMENT?)? at the end instead)
 */
Line ::= WS_HOZ? Statement | Words+ LINE_COMMENT?

// Hotkey_stmt MUST be checked before Directive_stmt since Hotkeys can begin with a # just like directives
private Statement ::= Label_stmt | Directive_stmt | Other_stmt

//// BEGIN Labels - https://www.autohotkey.com/docs/misc/Labels.htm
private Label_stmt ::= Normal_label_stmt | Hotstring_stmt | Hotkey_stmt

Normal_label_stmt ::= Normal_label ':' WS_HOZ? LINE_COMMENT? End_of_stmt
Normal_label ::= (Valid_special_chars_normal_label | IDENTIFIER)+

Hotstring_stmt ::= ((':' (Valid_special_chars_hotstring | IDENTIFIER | WS_HOZ)+ ':') | '::') Hotstring '::' Words*
Hotstring ::= (Special_char | IDENTIFIER | WS_HOZ)+

Hotkey_stmt ::= Hotkey '::' Words*
Hotkey ::= (Special_char | IDENTIFIER) (WS_HOZ? (Special_char | IDENTIFIER))*
//// END Labels

Directive_stmt ::= Directive (Lang_Fn_Call_Sep WS_HOZ? Words*)? End_of_stmt
Directive ::= '#' IDENTIFIER

Other_stmt ::= Words+

private Lang_Fn_Call_Sep ::= ',' | WS_HOZ
private End_of_stmt ::= CRLF | <<eof>>

private Words ::= (Special_char | '::' | IDENTIFIER | WS_HOZ)+
private Special_char ::= ':' | '#' | ',' | '`' | CHAR_SPECIAL
private Valid_special_chars_hotstring ::= '#' | ',' | '`' | CHAR_SPECIAL
private Valid_special_chars_normal_label ::= '#' | CHAR_SPECIAL
